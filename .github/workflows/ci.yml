name: 🔄 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'
  POSTGRES_VERSION: '13'

jobs:
  # ===============================
  # Backend Tests (Go)
  # ===============================
  backend-test:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sami_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐹 Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: 📦 Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: 🔄 Download dependencies
      working-directory: ./backend
      run: go mod download

    - name: 🧹 Go mod tidy
      working-directory: ./backend
      run: go mod tidy

    - name: ✅ Verify dependencies
      working-directory: ./backend
      run: go mod verify

    - name: 🔍 Run go vet
      working-directory: ./backend
      run: go vet ./...

    - name: 🎯 Run go fmt
      working-directory: ./backend
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "❌ Go code is not formatted properly"
          gofmt -s -l .
          exit 1
        fi

    - name: 📊 Run tests with coverage
      working-directory: ./backend
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: sami_test
        DB_SSL_MODE: disable
        JWT_SECRET: test-secret-key
        GIN_MODE: test
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: 📈 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.out
        flags: backend
        name: backend-coverage

  # ===============================
  # Frontend Tests (Node.js)
  # ===============================
  frontend-test:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend-sami/package-lock.json

    - name: 📦 Install dependencies
      working-directory: ./frontend-sami
      run: npm ci

    - name: 🔍 Run ESLint
      working-directory: ./frontend-sami
      run: npm run lint

    - name: 🎯 Check TypeScript
      working-directory: ./frontend-sami
      run: npm run type-check

    - name: 🧪 Run tests
      working-directory: ./frontend-sami
      run: npm run test -- --coverage --watchAll=false

    - name: 🏗️ Build application
      working-directory: ./frontend-sami
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8080/api
        NEXT_PUBLIC_API_VERSION: v2
      run: npm run build

    - name: 📈 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend-sami/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # ===============================
  # Security Scans
  # ===============================
  security:
    name: 🔒 Security Scans
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: 🕵️ CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: go, javascript

  # ===============================
  # Docker Build Tests
  # ===============================
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ Build Backend Docker image
      working-directory: ./backend
      run: |
        docker build -t sami-backend:test .

    - name: 🏗️ Build Frontend Docker image
      working-directory: ./frontend-sami
      run: |
        docker build -t sami-frontend:test .

    - name: 🧪 Test Docker Compose
      run: |
        cp docker.env .env
        docker-compose config
        docker-compose up -d --build
        sleep 30
        docker-compose ps
        docker-compose down

  # ===============================
  # Integration Tests
  # ===============================
  integration:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sami_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐹 Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend-sami/package-lock.json

    - name: 🗄️ Setup database
      run: |
        PGPASSWORD=postgres psql -h localhost -U postgres -d sami_test -f backend/db.sql
        PGPASSWORD=postgres psql -h localhost -U postgres -d sami_test -f init-admin.sql

    - name: 🚀 Start backend
      working-directory: ./backend
      env:
        PORT: 8080
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: sami_test
        JWT_SECRET: test-secret-key
        GIN_MODE: release
      run: |
        go mod download
        go run main.go &
        sleep 10

    - name: 🎨 Install frontend dependencies
      working-directory: ./frontend-sami
      run: npm ci

    - name: 🧪 Run E2E tests
      working-directory: ./frontend-sami
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8080/api
        NEXT_PUBLIC_API_VERSION: v2
      run: |
        npm run build
        npm start &
        sleep 10
        npm run test:e2e

  # ===============================
  # Deployment (only on main)
  # ===============================
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security, docker-build, integration]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🏷️ Generate version
      id: version
      run: |
        VERSION=$(date +%Y%m%d)-${GITHUB_SHA::8}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 🏗️ Build and push Backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/sami-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/sami-backend:${{ steps.version.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🏗️ Build and push Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend-sami
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/sami-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/sami-frontend:${{ steps.version.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 📊 Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Release v${{ steps.version.outputs.version }}
        body: |
          ## 🚀 Release v${{ steps.version.outputs.version }}
          
          ### 📦 Docker Images
          - Backend: `${{ secrets.DOCKER_USERNAME }}/sami-backend:${{ steps.version.outputs.version }}`
          - Frontend: `${{ secrets.DOCKER_USERNAME }}/sami-frontend:${{ steps.version.outputs.version }}`
          
          ### 📝 Changes
          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
        draft: false
        prerelease: false

  # ===============================
  # Notify on Failure
  # ===============================
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security, docker-build]
    if: failure()
    
    steps:
    - name: 🚨 Send failure notification
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "❌ CI/CD Pipeline failed for ${{ github.repository }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 